JSON 函数和操作符
==================

表格 9.40 展示了两种 JSON 数据类型可用的操作符。

----

表格 9.40 ``json`` 和 ``jsonb`` 操作符

+-----------+---------------+-------------------------------------------------------+-------------------------------------------------------+-------------------+
| 操作符    | 参数类型      | 作用                                                  | 例子                                                  | 例子的执行结果    |
+===========+===============+=======================================================+=======================================================+===================+
| ``->``    | ``int``       | 获取 JSON 数组元素，索引以 0 为开始                   | ``'[{"a":"foo"},{"b":"bar"},{"c":"baz"}]'::json->2``  | ``{"c":"baz"}``   |
+-----------+---------------+-------------------------------------------------------+-------------------------------------------------------+-------------------+
| ``->``    | ``text``      | 通过键来获取 JSON 对象的域（field）                   | ``'{"a": {"b":"foo"}}'::json->'a'``                   | ``{"b":"foo"}``   |
+-----------+---------------+-------------------------------------------------------+-------------------------------------------------------+-------------------+
| ``->>``   | ``int``       | 获取 JSON 数组元素，然后以 ``text`` 形式返回它        | ``'[1,2,3]'::json->>2``                               | ``3``             |
+-----------+---------------+-------------------------------------------------------+-------------------------------------------------------+-------------------+
| ``->>``   | ``text``      | 获取 JSON 对象的域，然后以 ``text`` 形式返回它        | ``'{"a":1,"b":2}'::json->>'b'``                       | ``2``             |
+-----------+---------------+-------------------------------------------------------+-------------------------------------------------------+-------------------+
| ``#>``    | ``text[]``    | 获取指定路径上的 JSON 对象                            | ``'{"a": {"b":{"c": "foo"}}}'::json#>'{a,b}'``        | ``{"c": "foo"}``  |
+-----------+---------------+-------------------------------------------------------+-------------------------------------------------------+-------------------+
| ``#>>``   | ``text[]``    | 获取指定路径上的 JSON 对象，并以 ``text`` 形式返回它  | ``'{"a":[1,2,3],"b":[4,5,6]}'::json#>>'{a,2}'``       | ``3``             |
+-----------+---------------+-------------------------------------------------------+-------------------------------------------------------+-------------------+

..
    .. note::

        There are parallel variants of these operators for both the json and jsonb types. The field/element/path extraction operators return the same type as their left-hand input (either json or jsonb), except for those specified as returning text, which coerce the value to text. The field/element/path extraction operators return NULL, rather than failing, if the JSON input does not have the right structure to match the request; for example if no such element exists.

----

`表格 9.1 <http://www.postgresql.org/docs/9.4/interactive/functions-comparison.html#FUNCTIONS-COMPARISON-TABLE>`_\ 展示了 ``jsonb`` 类型的标准比较操作符，但这些操作符不能用于 ``json`` 类型。
表格中的操作符都遵循 `8.14.4 节 <http://www.postgresql.org/docs/9.4/interactive/datatype-json.html#JSON-INDEXING>`_\ 介绍的 B 树排序规则。

表格 9.41 展示了 ``jsonb`` 类型的另外一些操作符。

----

表格 9.41 附加的 ``jsonb`` 操作符

======  =========== ==============================================  =========================================================
操作符  右值的类型  作用                                            示例
======  =========== ==============================================  =========================================================
``@>``  ``jsonb``   左边的 JSON 值是否包含了右边的值？              ``'{"a":1, "b":2}'::jsonb @> '{"b":2}'::jsonb``
``<@``  ``jsonb``   左边的 JSON 值是否被右边的值包含在内？          ``'{"b":2}'::jsonb <@ '{"a":1, "b":2}'::jsonb``
``?``   ``text``    给定的字符串键/元素是否存在于 JSON 值之内？     ``'{"a":1, "b":2}'::jsonb ? 'b'``
``?|``  ``text[]``  给定键/元素是否有任何一个存在于 JSON 值之内？   ``'{"a":1, "b":2, "c":3}'::jsonb ?| array['b', 'c']``
``?&``  ``text[]``  给定键/元素是否全部都存在于 JSON 值之内？       ``'["a", "b"]'::jsonb ?& array['a', 'b']``
======  =========== ==============================================  =========================================================

----

以上大部分操作符都可以通过 ``jsonb`` 操作符类型来进行索引。
`8.14.3 节 <http://www.postgresql.org/docs/9.4/interactive/datatype-json.html#JSON-CONTAINMENT>`_ 完整地介绍了 ``jsonb`` 的包含操作符（containment）和存在操作符（existence）。
`8.14.4 节 <http://www.postgresql.org/docs/9.4/interactive/datatype-json.html#JSON-INDEXING>`_\ 展示了如何使用这些操作符来高效地索引 ``jsonb`` 数据。

表格 9.42 展示了用于创建 ``json`` 值的函数。
目前还没有专门用于创建 ``jsonb`` 数据的函数，
但我们可以将下面这些函数的执行结果转换为 ``jsonb`` 数据。

----

表格 9.42 JSON 创建函数

+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+
| 函数                                          | 描述                                                                          | 执行示例                                          | 示例的执行结果                            |
+===============================================+===============================================================================+===================================================+===========================================+
| ``to_json(anyelement)``                       | 以 JSON 格式返回输入的值。                                                    | ``to_json('Fred said "Hi."'::text)``              | ``"Fred said \"Hi.\""``                   |
|                                               | 数组和复合数据会被（递归地）转换为数组和对象；                                |                                                   |                                           |
|                                               | 如果有转换函数可以将输入的数据转换为 ``json`` 的话，那么使用转换函数；        |                                                   |                                           |
|                                               | 或者产生一个 JSON 标量（scalar）值。                                          |                                                   |                                           |
|                                               | 数字、布尔值和空值（null）之外的其他标量会被表示为文本格式，                  |                                                   |                                           |
|                                               | 并通过正确的引用和转义来保证它是一个合法的 JSON 字符串。                      |                                                   |                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+
| ``array_to_json(anyarray [, pretty_bool])``   | 以 JSON 数组格式返回输入的数组。                                              | ``array_to_json('{{1,5},{99,100}}'::int[])``      | ``[[1,5],[99,100]]``                      |
|                                               | 一个 PostgreSQL 多维数组将被转换成一个由多个数组组成的 JSON 数组。            |                                                   |                                           |
|                                               | 如果 ``pretty_bool`` 的值为 ``true`` ，                                       |                                                   |                                           |
|                                               | 那么各个维度-1的元素之间将会添加一个换行符。                                  |                                                   |                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+
| ``row_to_json(record [, pretty_bool])``       | 以 JSON 对象格式返回行。                                                      | ``row_to_json(row(1,'foo'))``                     | ``{"f1":1,"f2":"foo"}``                   |
|                                               | 如果 ``pretty_bool`` 的值为 ``true`` ，                                       |                                                   |                                           |
|                                               | 那么各个层-1的元素之间将会添加一个换行符。                                    |                                                   |                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+
| ``json_build_array(VARIADIC "any")``          | 根据可变参数列表，                                                            | ``json_build_array(1,2,'3',4,5)``                 | ``[1, 2, "3", 4, 5]``                     |
|                                               | 构建一个可能由多种类型组成（possibly-heterogeneously-typed ）的 JSON 数组。   |                                                   |                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+
| ``json_build_object(VARIADIC "any")``         | 根据输入的可变参数列表构建一个 JSON 对象。                                    | ``json_build_object('foo',1,'bar',2)``            | ``{"foo": 1, "bar": 2}``                  |
|                                               | 根据习惯，参数列表将由交替的键和值组成。                                      |                                                   |                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+
| ``json_object(text[])``                       | 根据输入的文本数组构建一个 JSON 对象。                                        | ``json_object('{a, 1, b, "def", c, 3.5}')``       | ``{"a": "1", "b": "def", "c": "3.5"}``    |
|                                               | 输入的数组要么就是由偶数个成员组成的一维数组，                                |                                                   |                                           |
|                                               | 数组中的每两个成员组成一个键值对；                                            | ``json_object('{{a, 1},{b, "def"},{c, 3.5}}')``   |                                           |
|                                               | 要么就是一个二维数组，并且每个内部数组都正好包含两个元素，                    |                                                   |                                           |
|                                               | 这两个元素组成一个键值对。                                                    |                                                   |                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+
| ``json_object(keys text[], values text[])``   | 这个格式的 ``json_object`` 函数接受两个数组作为输入，                         | ``json_object('{a, b}', '{1,2}')``                | ``{"a": "1", "b": "2"}``                  |
|                                               | 第一个数组的元素会被用作键值对的键，                                          |                                                   |                                           |
|                                               | 而第二个数组的元素则会被用作键值对的值。                                      |                                                   |                                           |
+-----------------------------------------------+-------------------------------------------------------------------------------+---------------------------------------------------+-------------------------------------------+

..
    .. note::

        array_to_json and row_to_json have the same behavior as to_json except for offering a pretty-printing option. 
        The behavior described for to_json likewise applies to each individual value converted by the other JSON creation functions.

    .. note::

        The `hstore <http://www.postgresql.org/docs/9.4/interactive/hstore.html>`_ extension has a cast from hstore to json, 
        so that hstore values converted via the JSON creation functions will be represented as JSON objects, 
        not as primitive string values.

----

表格 9-43 展示了 ``json`` 值和 ``jsonb`` 值的处理函数。

----

表格 9-43 JSON 处理函数

+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| 函数                                              | 返回值类型                    | 作用                                          | 执行示例                                                      | 示例执行结果              |
+===================================================+===============================+===============================================+===============================================================+===========================+
| ``json_array_length(json)``                       | ``int``                       | 返回最外层的 JSON 数组的元素数量。            | ``json_array_length('[1,2,3,{"f1":1,"f2":[5,6]},4]')``        | ``5``                     |
|                                                   |                               |                                               |                                                               |                           |
| ``jsonb_array_length(jsonb)``                     |                               |                                               |                                                               |                           |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_each(json)``                               | 一系列文本键和 ``json`` 值    | 将最外层的 JSON 对象展开为一系列键值对。      | ``select * from json_each('{"a":"foo", "b":"bar"}')``         | ::                        |
|                                                   |                               |                                               |                                                               |                           |
| ``jsonb_each(jsonb)``                             | 一系列文本键和 ``jsonb`` 值   |                                               |                                                               |      key | value          |
|                                                   |                               |                                               |                                                               |     -----+-------         |
|                                                   |                               |                                               |                                                               |      a   | "foo"          |
|                                                   |                               |                                               |                                                               |      b   | "bar"          |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_each_text(json)``                          | 一系列文本键和文本值          | 将最外层的 JSON 对象展开为一系列键值对，      | ``select * from json_each_text('{"a":"foo", "b":"bar"}')``    | ::                        |
|                                                   |                               | 并以 ``text`` 格式返回这些键值对。            |                                                               |                           |
| ``jsonb_each_text(jsonb)``                        |                               |                                               |                                                               |     key | value           |
|                                                   |                               |                                               |                                                               |    -----+-------          |
|                                                   |                               |                                               |                                                               |     a   | foo             |
|                                                   |                               |                                               |                                                               |     b   | bar             |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_extract_path(from_json json,``             | ``json``                      | 返回 ``path_elems`` 所指向的 JSON 值。        | ``json_extract_path``                                         | ``{"f5":99,"f6":"foo"}``  |
| ``VARIADIC path_elems text[])``                   |                               | 等同于 ``#>`` 操作符。                        | ``('{"f2":{"f3":1},"f4":{"f5":99,"f6":"foo"}}','f4')``        |                           |
|                                                   |                               |                                               |                                                               |                           |
| ``jsonb_extract_path(from_json jsonb,``           | ``jsonb``                     |                                               |                                                               |                           |
| ``VARIADIC path_elems text[])``                   |                               |                                               |                                                               |                           |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_extract_path_text(``                       | ``text``                      | 以 ``text`` 格式，                            | ``json_extract_path_text``                                    | ``foo``                   |
| ``from_json json, VARIADIC path_elems text[])``   |                               | 返回 ``path_elems`` 所指向的 JSON 值。        | ``('{"f2":{"f3":1},"f4":{"f5":99,"f6":"foo"}}','f4', 'f6')``  |                           |
|                                                   |                               | 效果等同于 ``#>>`` 操作符。                   |                                                               |                           |
| ``jsonb_extract_path_text(``                      |                               |                                               |                                                               |                           |
| ``from_json jsonb, VARIADIC path_elems text[])``  |                               |                                               |                                                               |                           |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_object_keys(json)``                        | 一系列 ``text``               | 返回最外层的 JSON 对象所包含的键。            | ``json_object_keys``                                          | ::                        |
|                                                   |                               |                                               | ``('{"f1":"abc","f2":{"f3":"a", "f4":"b"}}')``                |                           |
| ``jsonb_object_keys(jsonb)``                      |                               |                                               |                                                               |     json_object_keys      |
|                                                   |                               |                                               |                                                               |    ------------------     |
|                                                   |                               |                                               |                                                               |     f1                    |
|                                                   |                               |                                               |                                                               |     f2                    |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_populate_record(``                         | 任意元素                      | 将 ``from_json`` 中的对象展开到一个行里面，   | ``select * from``                                             | ::                        |
| ``base anyelement, from_json json)``              |                               | 这个行的各个列与 ``base``                     | ``json_populate_recordset``                                   |                           |
|                                                   |                               | 中定义的 ``record`` 类型一致。                | ``(null::myrowtype, '[{"a":1,"b":2},{"a":3,"b":4}]')``        |     a | b                 |
| ``jsonb_populate_record(``                        |                               |                                               |                                                               |    ---+---                |
| ``base anyelement, from_json jsonb)``             |                               |                                               |                                                               |     1 | 2                 |
|                                                   |                               |                                               |                                                               |     3 | 4                 |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_array_elements(json)``                     | 一系列 ``json``               | 将一个 JSON 数组展开为一系列 JSON 值。        | ``select * from json_array_elements('[1,true, [2,false]]')``  | ::                        |
|                                                   |                               |                                               |                                                               |                           |
| ``jsonb_array_elements(jsonb)``                   | 一系列 ``jsonb``              |                                               |                                                               |      value                |
|                                                   |                               |                                               |                                                               |     -----------           |
|                                                   |                               |                                               |                                                               |      1                    |
|                                                   |                               |                                               |                                                               |      true                 |
|                                                   |                               |                                               |                                                               |      [2, false]           |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_array_elements_text(json)``                | 一系列 ``text``               | 将一个 JSON 数组展开为一系列 ``text`` 值。    | ``select * from json_array_elements_text('["foo", "bar"]')``  | ::                        |
|                                                   |                               |                                               |                                                               |                           |
| ``jsonb_array_elements_text(jsonb)``              |                               |                                               |                                                               |      value                |
|                                                   |                               |                                               |                                                               |     -----------           |
|                                                   |                               |                                               |                                                               |      foo                  |
|                                                   |                               |                                               |                                                               |      bar                  |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_typeof(json)``                             | ``text``                      | 以字符串形式返回最外层 JSON 值的类型。        | ``json_typeof('-123.4')``                                     | ``number``                |
|                                                   |                               | 可能出现的类型有 ``object`` 、 ``array`` 、   |                                                               |                           |
| ``jsonb_typeof(jsonb)``                           |                               | ``string`` 、 ``number`` 、 ``boolean`` 和    |                                                               |                           |
|                                                   |                               | ``null`` 。                                   |                                                               |                           |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_to_record(json)``                          | ``record``                    | 根据一个 JSON 对象来构建一个任意的            | ``select * from json_to_record``                              | ::                        |
|                                                   |                               | ``record`` 。                                 | ``('{"a":1,"b":[1,2,3],"c":"bar"}')``                         |                           |
| ``jsonb_to_record(jsonb)``                        |                               | 和所有返回 ``record`` 的函数一样，            | ``as x(a int, b text, d text)``                               |      a |    b    | d      |
|                                                   |                               | 调用者必须通过 ``as`` 语句来明确地定义        |                                                               |     ---+---------+---     |
|                                                   |                               | ``record`` 的结构。                           |                                                               |      1 | [1,2,3] |        |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+
| ``json_to_recordset(json)``                       | 一系列 ``record``             | 根据一个由 JSON 对象组成的数组，              | ``select * from``                                             | ::                        |
|                                                   |                               | 构建一个任意的 ``record`` 集合。              | ``json_to_recordset``                                         |                           |
| ``jsonb_to_recordset(jsonb)``                     |                               | 和所有返回 ``record`` 的函数一样，            | ``('[{"a":1,"b":"foo"},{"a":"2","c":"bar"}]')``               |      a |  b               |
|                                                   |                               | 调用者必须通过 ``as`` 语句来明确地定义        | ``as x(a int, b text);``                                      |     ---+-----             |
|                                                   |                               | ``record`` 的结构。                           |                                                               |      1 | foo              |
|                                                   |                               |                                               |                                                               |      2 |                  |
+---------------------------------------------------+-------------------------------+-----------------------------------------------+---------------------------------------------------------------+---------------------------+


----

..
    .. note:: 

        Many of these functions and operators will convert Unicode escapes in JSON strings to the appropriate single character. 
        This is a non-issue if the input is type jsonb, 
        because the conversion was already done; 
        but for json input, 
        this may result in throwing an error, 
        as noted in `Section 8.14 <http://www.postgresql.org/docs/9.4/interactive/datatype-json.html>`_ .

    .. note:: 

        In json_populate_record, 
        json_populate_recordset, 
        json_to_record and json_to_recordset, 
        type coercion from the JSON is "best effort" and may not result in desired values for some types. 
        JSON keys are matched to identical column names in the target row type. 
        JSON fields that do not appear in the target row type will be omitted from the output, 
        and target columns that do not match any JSON field will simply be NULL.

    .. note:: 

        The json_typeof function's null return value should not be confused with a SQL NULL. 
        While calling json_typeof('null'::json) will return null, 
        calling json_typeof(NULL::json) will return a SQL NULL.

`9.20 节 <http://www.postgresql.org/docs/9.4/interactive/functions-aggregate.html>`_ 介绍了如何使用聚合计算函数（aggregate function） ``json_agg`` 来将 ``record`` 值聚合为 JSON ，
以及如何使用聚合函数 ``json_object_agg`` 来将成对的聚合数据（aggregates pairs of values）聚合为一个 JSON 对象。
